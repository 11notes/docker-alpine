name: create and publish docker image

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  IMAGE_ARCH: "linux/amd64,linux/arm64"

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write

    steps:   
      - name: init / checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: init / .json to env
        uses: rgarcia-phi/json-to-variables@9835d537368468c4e4de5254dc3efeadda183793
        with:
          filename: '.json'

      - name: init / semver and other tags
        env:
          APP_VERSION: ${{ env.json_version }}
          STABLE: ${{ env.json_stable }}
          APP_IMAGE: ${{ env.json_image }}
          SPECIAL_TAGS: ${{ env.json_tags }}
        run: |
          export SHA=$(git rev-parse --short HEAD)
          export SEMVER_MAJOR=$(awk -F. '{ print $1 }' <<< ${APP_VERSION})
          export SEMVER_MINOR=$(awk -F. '{ print $2 }' <<< ${APP_VERSION})
          export SEMVER_PATCH=$(awk -F. '{ print $3 }' <<< ${APP_VERSION})
          export TAGS="${APP_IMAGE}:latest"

          if [ ! -z ${SEMVER_MAJOR} ]; then TAGS="${TAGS},${APP_IMAGE}:${SEMVER_MAJOR}"; fi
          if [ ! -z ${SEMVER_MINOR} ]; then TAGS="${TAGS},${APP_IMAGE}:${SEMVER_MAJOR}.${SEMVER_MINOR}"; fi
          if [ ! -z ${SEMVER_PATCH} ]; then TAGS="${TAGS},${APP_IMAGE}:${SEMVER_MAJOR}.${SEMVER_MINOR}.${SEMVER_PATCH}"; fi
          if echo "${TAGS}" | grep -q "${STABLE}" ; then TAGS="${TAGS},${APP_IMAGE}:stable"; fi
          if [ ! -z ${SPECIAL_TAGS} ]; then SPECIAL_TAGS=$(echo ${SPECIAL_TAGS} | sed 's/,/ /g'); for TAG in ${SPECIAL_TAGS}; do TAGS="${TAGS},${APP_IMAGE}:${TAG}"; done; fi
          
          TAGS="${TAGS},${APP_IMAGE}:${SHA}"
          echo "${TAGS}"
          echo "IMAGE_TAGS=${TAGS}" >> $GITHUB_ENV

      - name: docker / login to hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: docker / setup qemu
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a

      - name: docker / setup buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5

      - name: grype / build & push
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d
        with:
          context: .
          file: arch.dockerfile
          push: true
          platforms: ${{ env.IMAGE_ARCH }}
          cache-from: type=registry,ref=${{ env.json_image }}:buildcache
          cache-to: type=registry,ref=${{ env.json_image }}:buildcache,mode=max,compression=zstd,force-compression=true
          build-args: |
            APP_IMAGE=${{ env.json_image }}
            APP_NAME=${{ env.json_name }}
            APP_VERSION=${{ env.json_version }}
            APP_ROOT=${{ env.json_root }}
          tags: |
            ${{ env.json_image }}:grype

      - name: grype / scan
        id: scan
        uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342
        with:
          image: ${{ env.json_image }}:grype
          severity-cutoff: high

      - name: grype / delete tag
        if: success() || failure()
        run: |
          curl --request DELETE \
            --url https://hub.docker.com/v2/repositories/${{ env.json_image }}/tags/grype/ \
            --header 'authorization: jwt ${{ secrets.DOCKER_TOKEN }}' \
            --header 'content-type: application/json' \
            --fail

      - name: grype / report / upload
        uses: github/codeql-action/upload-sarif@48ab28a6f5dbc2a99bf1e0131198dd8f1df78169
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: grype / report / print
        run: cat ${{ steps.scan.outputs.sarif }}

      - name: docker / build & push
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d
        with:
          context: .
          file: arch.dockerfile
          push: true
          sbom: true
          provenance: mode=max
          platforms: ${{ env.IMAGE_ARCH }}
          cache-from: type=registry,ref=${{ env.json_image }}:buildcache
          cache-to: type=registry,ref=${{ env.json_image }}:buildcache,mode=max,compression=zstd,force-compression=true
          build-args: |
            APP_IMAGE=${{ env.json_image }}
            APP_NAME=${{ env.json_name }}
            APP_VERSION=${{ env.json_version }}
            APP_ROOT=${{ env.json_root }}
          tags: |
            ${{ env.IMAGE_TAGS }}

      - name: github / create release notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create ${{ github.ref_name }} -F RELEASE.md

      - name: github / update description and set repo defaults
        run: |
          curl --request PATCH \
            --url https://api.github.com/repos/${{ github.repository }} \
            --header 'authorization: Bearer ${{ secrets.REPO_TOKEN }}' \
            --header 'content-type: application/json' \
            --data '{
              "description":"${{ env.json_description }}",
              "homepage":"",
              "has_issues":true,
              "has_discussions":true,
              "has_projects":false,
              "has_wiki":false
            }' \
            --fail

      - name: docker / push README.md to docker hub
        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKER_TOKEN }}
        with:
          destination_container_repo: ${{ env.json_image }}
          provider: dockerhub
          short_description: ${{ env.json_description }}
          readme_file: 'README.md'